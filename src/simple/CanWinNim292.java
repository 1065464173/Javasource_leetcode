package simple;

/**
 * @program: Javasource_leetcode
 * @description: 你和你的朋友，两个人一起玩Nim 游戏：
 *     <p>桌子上有一堆石头。 你们轮流进行自己的回合，你作为先手。 每一回合，轮到的人拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。
 *     假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。
 *     <p>满足以下条件的游戏是ICG（可能不太严谨）： <br>
 *     1、有两名选手；<br>
 *     2、两名选手交替对游戏进行移动(move)，每次一步，选手可以在（一般而言）有限的合法移动集合中任选一种进行移动；<br>
 *     3、对于游戏的任何一种可能的局面，合法的移动集合只取决于这个局面本身，不取决于轮到哪名选手操作、以前的任何操作、骰子的点数或者其它什么因素； <br>
 *     4、如果轮到某名选手移动，且这个局面的合法的移动集合为空（也就是说此时无法进行移动），则这名选手负。根据这个定义，很多日常的游戏并非ICG。例如象棋就不满足条件3，因为红方只能移动红子，黑方只能移动黑子，合法的移动集合取决于轮到哪名选手操作。
 * @author: Sxuet
 * @create: 2021-08-25 22:13
 */
public class CanWinNim292 {
  /**
   * 如果堆中石头的数量 n n 不能被 4 4 整除，那么你总是可以赢得 Nim 游戏的胜利。 <br>
   * 时间O(1) 空间O(1)
   *
   * @param n
   * @return
   */
  public boolean canWinNim1(int n) {
    return n % 4 != 0;
  }
}
